import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'




import {
  Box,
  Button,
  Flex,
  FormControl,
  FormLabel,
  Heading,
  IconButton,
  Input,
  InputGroup,
  InputLeftElement,
  Link,
  Select,
  Stack,
  Table,
  TableContainer,
  Tbody,
  Td,
  Textarea,
  Tfoot,
  Th,
  Thead,
  Tooltip,
  Tr,
  useClipboard,
  useColorModeValue,
  VStack,
} from '@chakra-ui/react';
import React, { useState } from 'react';
import { useFormik } from 'formik';



const confetti = {
  light: {
    primary: '4299E1', // blue.400
    secondary: 'BEE3F8', // blue.100
  },

  dark: {
    primary: '1A365D', // blue.900
    secondary: '2A4365', // blue.800
  },
};


export default function Home() {
  const handleCalculation = () => {
    // const weight1 =weightOne
    // const weight2 =weightTwo
    // const operationType = operation
    // const firstInput =input1
    // const secondInput = input2
    // const thresholdInput = threshhold
    // const learningRateInput = learningRate
    // console.log("what we got","input one:",firstInput,"input two: ",secondInput,"w1:",weight1,"w2",weight2,"threshold: ",thresholdInput,"learning rate:",learningRateInput,"operation: ",operationType)
    // const result =

  }
  const [weightOne, setWeightOne] = useState(0.0)
  const [weightTwo, setWeightTwo] = useState(0.0)
  const [operation, setOperation] = useState('AND')
  const [input1, setInput1] = useState(1)
  const [input2, setInput2] = useState(0)
  const [threshhold, setThreshhold] = useState(0.0)
  const [learningRate, setLearningRate] = useState(0.0)
  const [showTable, setShowTable] = useState(false)
const calculation = (values:any)=>{
  //'' added to number converts it to string

  //create a big array of objects
const allPatterns=[]
  // {w1,w2,input1,input2,result}
  const input1= ''+values.input1;
  const input2 = ''+values.input2;
  const input1Array = Array.from(String(input1), Number);
  const input2Array = Array.from(String(input2), Number);
  const lengthInput1 = input1Array.length
  const lengthInput2 = input2Array.length
console.log("values pure",values)
  console.log("arrays",input1Array,input2Array)
  // const element ={input1,input2,w1,w2}
  // allPatterns.push(element)
  console.log("all input element1,element2,w1,w2",input1Array.slice(-1)[0],input2Array.slice(-1)[0],values.w1,values.w2)
  setWeightOne(values.w1)
  setWeightTwo(values.w2)
//  for(let i=0;i<values.patternCount;i++){
const pattern  =(input1Array.slice(-1)[0]*values.w1)+(input2Array.slice(-1)[0] *values.w2)
 console.log(`the result`,pattern)
 if(pattern>values.threshhold){
  //recalculate the weights
 }
 //add the number to the table



//  }
setShowTable(true)

}
  const formik = useFormik({
    initialValues: {
      w1: 0.0,
      w2: 0.0,
      input1: 0,
      input2: 0,
      learningRate: 0.0,
      opearation: 'AND',
      threshold: 0.0,
      operation: 0.0,
      outPut: 0.0,
      epoch: 1,
    },
    onSubmit:  (values) => {
       calculation(values)
      // alert(JSON.stringify(values, null, 2))
    },
  })


  return (
    <>
      <Head>
        <title>Perceptron algorithm Computational intelligence group 10</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <form onSubmit={formik.handleSubmit}>


        <Box
          borderRadius="lg"
          m={{ base: 5, md: 16, lg: 10 }}
          p={{ base: 5, lg: 16 }}>
          <Box>
            <VStack spacing={{ base: 4, md: 8, lg: 20 }}>
              <Heading
                fontSize={{
                  base: '4xl',
                  md: '5xl',
                }}>
                PERCEPTRON ALGORITHM DEMO
              </Heading>

              <Stack
                spacing={{ base: 4, md: 8, lg: 20 }}
                direction={{ base: 'column', md: 'row' }}>
                <Stack
                  align="center"
                  justify="space-around"
                  direction={{ base: 'row', md: 'column' }}>

                  <Link href="#">
                    <IconButton
                      aria-label="github"
                      variant="ghost"
                      size="lg"
                      fontSize="3xl"

                      _hover={{
                        bg: 'blue.500',
                        color: useColorModeValue('white', 'gray.700'),
                      }}
                      isRound
                    />
                  </Link>

                  <Link href="#">
                    <IconButton
                      aria-label="twitter"
                      variant="ghost"
                      size="lg"

                      _hover={{
                        bg: 'blue.500',
                        color: useColorModeValue('white', 'gray.700'),
                      }}
                      isRound
                    />
                  </Link>

                  <Link href="#">
                    <IconButton
                      aria-label="linkedin"
                      variant="ghost"
                      size="lg"

                      _hover={{
                        bg: 'blue.500',
                        color: useColorModeValue('white', 'gray.700'),
                      }}
                      isRound
                    />
                  </Link>
                </Stack>

                <Box
                  bg={useColorModeValue('white', 'gray.700')}
                  borderRadius="lg"
                  p={8}
                  color={useColorModeValue('gray.700', 'whiteAlpha.900')}
                  shadow="base">
                  <VStack spacing={5}>
                    <FormControl isRequired>
                      <FormLabel>Input 1 </FormLabel>

                      <InputGroup>

                        <Input type="number" name="input1" placeholder="01110111010" onChange={formik.handleChange}
                          value={formik.values.input1} />
                      </InputGroup>
                    </FormControl>

                    <FormControl isRequired>
                      <FormLabel>Input 2 </FormLabel>

                      <InputGroup>

                        <Input type="number" name="input2" placeholder="01110111010" onChange={formik.handleChange}
                          value={formik.values.input2} />
                      </InputGroup>
                    </FormControl>
                    <FormControl isRequired>
                      <FormLabel>expected output </FormLabel>

                      <InputGroup>

                        <Input type="number" name="output" placeholder="01110111010" onChange={formik.handleChange}
                          value={formik.values.outPut} />
                      </InputGroup>
                    </FormControl>

                    <FormControl isRequired>
                      <FormLabel>Weight 1 (w1)</FormLabel>

                      <InputGroup>

                        <Input
                          type="number"
                          name="w1"
                          placeholder="0.3"
                          onChange={formik.handleChange}
                          value={formik.values.w1}
                        />
                      </InputGroup>
                    </FormControl>
                    <FormControl isRequired>
                      <FormLabel>Weight 2 (w2)</FormLabel>

                      <InputGroup>

                        <Input
                          type="number"
                          name="w2"
                          placeholder="0.1"
                          onChange={formik.handleChange}
                          value={formik.values.w2}
                        />
                      </InputGroup>
                    </FormControl>
                    <FormControl isRequired >
                      <FormLabel>Learning Rate</FormLabel>
                      <Select name='learningRate' placeholder='Select learning rate' onChange={formik.handleChange}
                        value={formik.values.learningRate}>


                        <option value={0.1}>0.1</option>
                        <option value={0.5}>0.5</option>
                        <option value={1.0}>1.0</option>
                      </Select>
                    </FormControl>

                    <FormControl isRequired>
                      <FormLabel>operation type</FormLabel>

                      <Select placeholder='Select opertaion type' name="operation" onChange={formik.handleChange}
                        value={formik.values.operation}>
                        <option value={'AND'}>AND</option>
                        <option value={'OR'}>OR</option>
                        <option value={'NOT'}>NOT</option>

                      </Select>
                    </FormControl>

                    <Button
                      colorScheme="blue"
                      bg="blue.400"
                      color="white"
                      _hover={{
                        bg: 'blue.500',
                      }}
                      type='submit'
                    >
                      Generate
                    </Button>
                  </VStack>
                </Box>
              </Stack>
            </VStack>
          </Box>
        </Box>
      </form>
      {showTable?<TableContainer>
  <Table size='sm'>
    <Thead>
      <Tr>
        <Th>To convert</Th>
        <Th>into</Th>
        <Th isNumeric>multiply by</Th>
      </Tr>
    </Thead>
    <Tbody>
      <Tr>
        <Td>inches</Td>
        <Td>millimetres (mm)</Td>
        <Td isNumeric>25.4</Td>
      </Tr>
      <Tr>
        <Td>feet</Td>
        <Td>centimetres (cm)</Td>
        <Td isNumeric>30.48</Td>
      </Tr>
      <Tr>
        <Td>yards</Td>
        <Td>metres (m)</Td>
        <Td isNumeric>0.91444</Td>
      </Tr>
    </Tbody>
    <Tfoot>
      <Tr>
        <Th>To convert</Th>
        <Th>into</Th>
        <Th isNumeric>multiply by</Th>
      </Tr>
    </Tfoot>
  </Table>
</TableContainer>:null}
    </>
  );
}

